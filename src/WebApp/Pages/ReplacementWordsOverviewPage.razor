@page "/ReplacementWordsOverviewPage"
@using WebApp.Models
@using WebApp.Clients
@using WebApp.Components

@inject ReplacementWordsServiceClient ReplacementWordsServiceClient;

<PageTitle>Replacement Words Overview</PageTitle>
<h1>Replacement Words Overview</h1>
<button @onclick="async () => await CreateReplacementWord()">Create new</button>

@if (_replacementWordModels == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>@nameof(ReplacementWordModel.Id)</th>
            <th>@nameof(ReplacementWordModel.Oldspeak)</th>
            <th>@nameof(ReplacementWordModel.Newspeak)</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var replacementWordModel in _replacementWordModels)
        {
            <tr>
                <td>@replacementWordModel.Id</td>
                <td>@replacementWordModel.Oldspeak</td>
                <td>@replacementWordModel.Newspeak</td>
                <td>
                    <button @onclick="async () => await UpdateReplacementWord(replacementWordModel)">Edit</button>
                    <button>Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    
    private List<ReplacementWordModel>? _replacementWordModels;
    
    protected override async Task OnInitializedAsync()
    {
        var replacementWordModels = await ReplacementWordsServiceClient.GetReplacementWordsAsync();

        if (replacementWordModels == null)
        {
            return;
        }

        _replacementWordModels = replacementWordModels.ToList();
    }
    
    private async Task CreateReplacementWord()
    {
        var modal = Modal.Show<ReplacementWordsCreateModal>("Create");
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            var replacementWordModel = (ReplacementWordModel) result.Data;
            await ReplacementWordsServiceClient.CreateReplacementWordAsync(replacementWordModel);
        }
    }

    private async Task UpdateReplacementWord(ReplacementWordModel model)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ReplacementWordsEditModal.ReplacementWordId), model.Id);

        var modal = Modal.Show<ReplacementWordsEditModal>("Update", parameters);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            model = (ReplacementWordModel) result.Data;
        }
    }
}